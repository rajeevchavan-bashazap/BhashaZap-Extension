// UPDATED: Create translation popup with INCREMENT timer
    function createTranslationPopup(word, translations, x, y) {
        try {
            const popup = document.createElement('div');
            popup.className = 'bhashazap-popup bhashazap-draggable';
            
            let translationsHTML = '';

            // Always show English definition first
            if (translations['en']) {
                translationsHTML += `
                    <div class="bhashazap-translation" data-lang="en">
                        <div class="bhashazap-lang-name">English</div>
                        <div class="bhashazap-translation-text">${translations['en']}</div>
                    </div>
                `;
            }

            // Show translations for selected languages
            if (selectedLanguages && selectedLanguages.length > 0) {
                selectedLanguages.forEach(langCode => {
                    if (translations[langCode]) {
                        const languageName = languageNames[langCode] || langCode.toUpperCase();
                        translationsHTML += `
                            <div class="bhashazap-translation" data-lang="${langCode}">
                                <div class="bhashazap-lang-name">${languageName}</div>
                                <div class="bhashazap-translation-text">${translations[langCode]}</div>
                            </div>
                        `;
                    }
                });
            } else {
                // Show message when no languages selected
                translationsHTML += `
                    <div class="bhashazap-translation">
                        <div class="bhashazap-error-message">Select Indian languages from the extension popup to see translations.</div>
                    </div>
                `;
            }

            popup.innerHTML = `
                <div class="bhashazap-header bhashazap-drag-handle">
                    <div class="bhashazap-word">${word}</div>
                    <button class="bhashazap-close">Ã—</button>
                </div>
                <div class="bhashazap-countdown-container">
                    <div class="bhashazap-timer-number">0</div>
                    <div class="bhashazap-countdown-bar">
                        <div class="bhashazap-countdown-progress" style="width: 0%;"></div>
                    </div>
                </div>
                <div class="bhashazap-translations">
                    ${translationsHTML}
                </div>
                <div class="bhashazap-footer">
                    <div class="bhashazap-brand">BhashaZap 2.0.0</div>
                </div>
            `;

            positionAndShowPopup(popup, x, y);
            makeDraggable(popup);
            startIncrementTimer(popup); // Changed to increment timer

        } catch (error) {
            console.error('BhashaZap: Error creating translation popup:', error);
        }
    }

    // NEW: Start INCREMENT timer instead of countdown
    function startIncrementTimer(popup) {
        const progressBar = popup.querySelector('.bhashazap-countdown-progress');
        const timerNumber = popup.querySelector('.bhashazap-timer-number');
        if (!progressBar || !timerNumber) return;

        let timeElapsed = 0;
        const totalTime = popupDuration;
        
        if (countdownInterval) {
            clearInterval(countdownInterval);
        }
        
        // Update initial display
        timerNumber.textContent = '0';
        progressBar.style.width = '0%';
        
        countdownInterval = setInterval(() => {
            timeElapsed += 0.1;
            const percentage = (timeElapsed / totalTime) * 100;
            
            if (timeElapsed >= totalTime) {
                clearInterval(countdownInterval);
                if (currentPopup === popup) {
                    hidePopup();
                }
                return;
            }
            
            // Update progress bar (fills up instead of emptying)
            progressBar.style.width = percentage + '%';
            
            // Update number display (increment instead of countdown)
            timerNumber.textContent = Math.floor(timeElapsed);
            
            // Keep timer number green throughout
            timerNumber.style.color = '#10b981';
            
            // Progress bar stays green throughout
            progressBar.style.background = 'linear-gradient(90deg, #10b981, #059669)';
            
        }, 100);
    }